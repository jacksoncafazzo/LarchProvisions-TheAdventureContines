@model LarchRecipe.Models.Ingredient

@{
    ViewBag.Title = "Details";
}

<div class="row recipe-details">
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a href="/Recipes/Edit/@ViewBag.Recipe.ID"><h1>@ViewBag.Recipe.Name</h1></a>
        <p>Default Servings: @ViewBag.Recipe.Servings</p>
        <p><i>@ViewBag.Recipe.Description</i></p>
        <h4>Recipe Notes</h4>
        <p>@ViewBag.Recipe.Notes</p>
        @Html.ActionLink("Edit", "Edit", "Recipes", new { id = ViewBag.Recipe.ID }, new { @class = "recipe-edit" }) | @Html.ActionLink("Delete", "Delete", "Recipes", new { id = ViewBag.Recipe.ID }, new { @class = "recipe-delete" })
    </div>

    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
        <h3>Ingredients</h3>
        @{string servings = @ViewBag.Recipe.Servings.ToString();}

        @if (Request["ServingSize"] != null)
        {

            servings = Request["ServingSize"];
        }
        <ul>
            @{
                foreach (var ingredient in ViewBag.Ingredients)
                {
                    double newServingSize = (ingredient.SingleServing() * Int32.Parse(servings));
                    <li>
                        <strong>@ingredient.Name</strong> @newServingSize.ToString("0.##")
                        @ingredient.Unit
                    </li>
                }
            }
        </ul>
        <form method="post" action="">
            Showing for <input class="serving-input " type="number" name="ServingSize" value="@servings"> servings
            <input type="submit" value="Submit" class="submit">
        </form>
    </div>
    <div class="col-lg-5 col-md-4 col-sm-6 col-xs-12 ingredients">
        <h3>Add new Ingredient</h3>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <form action="/Recipes/Details/@ViewBag.Recipe.ID" method="post" class="form-inline">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group">
                        @Html.LabelFor(ingredient => ingredient.Amount, htmlAttributes: new { @class = "control-label col-md-2" })

                        @Html.EditorFor(ingredient => ingredient.Amount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(ingredient => ingredient.Amount, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(ingredient => ingredient.Unit, htmlAttributes: new { @class = "control-label col-md-2" })

                        @Html.EditorFor(ingredient => ingredient.Unit, new { htmlAttributes = new { @class = "form-control" } })  @Html.ValidationMessageFor(ingredient => ingredient.Unit, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">

                        @Html.LabelFor(ingredient => ingredient.Name, htmlAttributes: new { @class = "control-label col-md-2" })

                        @Html.EditorFor(ingredient => ingredient.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(ingredient => ingredient.Name, "", new { @class = "text-danger" })
                    </div>
                    Source can be the ingredient source or any notes
                    <div class="form-group">
                        @Html.LabelFor(ingredient => ingredient.Source, htmlAttributes: new { @class = "control-label col-md-2" })

                        @Html.EditorFor(ingredient => ingredient.Source, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(ingredient => ingredient.Source, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(ingredient => ingredient.RecipeId, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.DropDownListFor(ingredient => ingredient.RecipeId, ViewBag.RecipeList))
                        @Html.ValidationMessageFor(ingredient => ingredient.RecipeId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <input type="submit" value="Add" class="btn btn-default" />
                    </div>
                </form>
            </div>

            <div>
                @Html.ActionLink("Back to List", "Index")
            </div>

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
            }
        }
    </div>
</div>